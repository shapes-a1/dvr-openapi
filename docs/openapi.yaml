openapi: 3.0.2
info:
  version: 1.0.0
  title: ShapesAI - Deep Visual Reasoning
  termsOfService: 'https://example.com/terms/'
  contact:
    name: hello@shapes
    email: hello@shapes.ai
    url: 'https://shapes.ai'
  x-logo:
    url: >-
      https://00e9e64bac1a776f696d05165628950078386ff741dfd0d513-apidata.googleusercontent.com/download/storage/v1/b/dvr-assets/o/shape-logo-text.svg?qk=AD5uMEuV466wZKzCS-hp_xsx3rBzOV41RnMf2uQUbfRL_Dh3xpXxTGCCrTuUKjLQmomOpdX9nKc0svXkNVbDkrKI3gy1RAkZIiy966JTsWr-Ya1rAS1n9dzrykQKv-27nGJOTDuBSWvuiqcPPEP3p5RoMLoxgaMGK3Q90_MwxRaouOTbo_27HfLGF9jxIyckWKDgusx0ZVop4rK0GFDONet2loRtEB3u335XrphVrklF6nqcXXcsvDm89TVRh9M9KUOyPbfTE3HjwFR8sbCYGrfyT4QyxgsCx0RTsFd10sD-DRq4XJKRplgYSANp5-z5tnBNZX79dBN49E2Ej8nJUQZHIka7dxV_c_w8VZ5O4aqFKE9OoRp-Ua5QooF_c6fE9mXQm9a7FP6wdl82iWVM45bbTTYr3W0ZWl4HLBFh8QihbBakmBOQBOwvSv7GIN53FrywK2qv7j0JOCvKv5KlGJiZGoAy0onH1mbKR4fiDa4W_xPpbCitAvFixBhZ9wIzgJmVq7p9PT29zGXEXlLFaMCCFkjhUE_THF0X_FsLgiG5livRUDwTlvolmG9ENN0tuTPoTZ-Biqd7PTW57hRGN7PQrL7jUqtL83kWI9O2HQX_6ClrlLs-BwX62egUIs3f_cG8JFsiAeU8mR-gQYYssQmLg6YTNaBusBuroAFTwRbqUqbrl_rbVn4bVZvrq8exfa3dwNHrYGabm-0NjwZz2pk2wzpdf103kVmM2yyL-MMOqAzRHN_n8QE1EUMKBcp1_Bd7Rn-soDJ2hea3lkjl4tQXxRlIhSNEmT_9mfggk8E1ydbp2UAS32g&isca=1
  description: >
    This is the documentation for the Deep Visual Reasoning (DVR) API.

    # Introduction


    # OpenAPI Specification

    The goal of The OpenAPI Specification is to define a standard,
    language-agnostic interface to REST APIs which

    allows both humans and computers to discover and understand the capabilities
    of the service without access to source

    code, documentation, or through network traffic inspection. When properly
    defined via OpenAPI, a consumer can

    understand and interact with the remote service with a minimal amount of
    implementation logic. Similar to what

    interfaces have done for lower-level programming, OpenAPI removes the
    guesswork in calling the service.
externalDocs:
  description: Find out how to create a GitHub repo for your OpenAPI definition.
  url: 'https://github.com/Rebilly/generator-openapi-repo'
tags:
  - name: Echo
    description: Example echo operations
  - name: User
    description: Operations about user
servers:
  - url: 'http://example.com/api/v1'
  - url: 'https://example.com/api/v1'
paths:
  '/users/{username}':
    parameters:
      - name: pretty_print
        in: query
        description: Pretty print response
        schema:
          type: boolean
    get:
      tags:
        - User
      summary: Get user by user name
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched
          required: true
          schema:
            type: string
        - name: with_email
          in: query
          description: Filter users without email
          schema:
            type: boolean
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                username: user1
                email: user@example.com
        '403':
          description: Forbidden
        '404':
          description: User not found
    put:
      tags:
        - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be updated
          required: true
          schema:
            type: string
      security:
        - main_auth:
            - 'write:users'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
  /echo:
    post:
      tags:
        - Echo
      summary: Echo test
      description: Receive the exact message you've sent
      operationId: echo
      security:
        - api_key: []
        - basic_auth: []
      responses:
        '200':
          description: OK
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              $ref: '#/components/headers/ExpiresAfter'
          content:
            application/json:
              schema:
                type: string
              examples:
                response:
                  value: Hello world!
            application/xml:
              schema:
                type: string
            text/csv:
              schema:
                type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: Hello world!
          application/xml:
            schema:
              type: string
              example: Hello world!
        description: Echo payload
        required: true
components:
  securitySchemes:
    main_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://example.com/api/oauth/dialog'
          scopes:
            'read:users': read users info
            'write:users': modify or remove users
    api_key:
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic
  schemas:
    Email:
      description: User email address
      type: string
      format: test
      example: john.smith@example.com
    User:
      type: object
      properties:
        username:
          description: User supplied username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          $ref: '#/components/schemas/Email'
  headers:
    ExpiresAfter:
      description: date in UTC when token expires
      schema:
        type: string
        format: date-time
